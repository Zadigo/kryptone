import re
from functools import cached_property, lru_cache
from types import FunctionType
from kryptone.utils.urls import URL

from typing import DefaultDict, List, Literal, Tuple, Union

EMAIL_REGEX = Literal[r'\S+\@\S+']


class TextMixin:
    page_documents: List = ...
    fitted_page_documents: List = ...

    @cached_property
    def stop_words_english(self) -> str: ...
    @cached_property
    def stop_words_french(self) -> str: ...
    @cached_property
    def stop_words_html(self) -> str: ...
    @lru_cache(maxsize=10)
    def stop_words(self, language: str = ...) -> List[str]: ...
    @staticmethod
    def get_text_length(text: str) -> int: ...
    @property
    def _fitted_text_tokens(self) -> List[str]: ...
    @staticmethod
    def _tokenize(text: str) -> List[str]: ...
    @staticmethod
    def simple_clean_text(text: str, encoding: str = ...) -> str: ...

    def _remove_punctuation(self, text: str) -> str: ...
    def _remove_stop_words(self, text: str, language: str = ...) -> str: ...
    def _remove_stop_words_multipass(self, text: str) -> str: ...
    def _common_words(self, text: str) -> List[Tuple[str, int]]: ...
    def _rare_words(self, text: str) -> List[Tuple[str, int]]: ...

    def _run_processors(
        self,
        tokens: List[str],
        processors: List[FunctionType[[str], bool]]
    ) -> List[str]: ...

    def normalize_spaces(self, text: str) -> str: ...
    def fit(self, text: str) -> str: ...

    def fit_transform(
        self,
        text: str = ...,
        language: str = ...,
        use_multipass: bool = ...,
        text_processors: List = ...
    ) -> str: ...


class SEOMixin(TextMixin):
    page_audits: DefaultDict[dict] = ...
    raw_texts: List = ...
    error_pages: set = ...

    @property
    def get_page_title(self) -> str: ...
    @property
    def get_page_description(self) -> str: ...
    @property
    def get_page_keywords(self) -> str: ...
    @property
    def has_head_title(self) -> bool: ...
    @property
    def title_is_valid(self) -> bool: ...
    @property
    def description_is_valid(self) -> bool: ...
    @property
    def get_page_text(self) -> str: ...
    @staticmethod
    def normalize_integers(items) -> dict: ...
    @property
    def get_transformed_raw_page_text(self) -> str: ...
    @cached_property
    def page_speed_script(self) -> str: ...

    def get_page_speed(self, audit: dict) -> None: ...
    def get_page_status_code(self) -> int: ...

    def audit_images(self, audit) -> Tuple[int, set[str]]: ...
    def audit_structured_data(self, audit: dict) -> Tuple[bool, dict]: ...

    def vectorize_documents(self) -> Tuple: ...
    def vectorize_page(self, text) -> Tuple: ...
    def global_audit(self) -> dict: ...
    def audit_page(self, current_url: Union[URL, str]) -> dict: ...


class EmailMixin(TextMixin):
    emails_container: set = ...

    @staticmethod
    def identify_email(value: str) -> Union[str, None]: ...
    @staticmethod
    def parse_url(element) -> Union[str, None]: ...
    def parse_protected_email(self, email: Union[URL, str]) -> str: ...
    def emails(self, text: str, elements: List = ...) -> None: ...
    def find_emails_from_text(self, text: str) -> set[str]: ...
    def find_emails_from_links(self, elements: List) -> set[str]: ...
