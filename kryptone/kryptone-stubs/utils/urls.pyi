import pathlib
import re
from functools import lru_cache
from typing import List, Tuple, Union
from urllib.parse import ParseResult

class URL:
    raw_url: str = ...
    url_object: ParseResult = ...

    def __init__(self, url_string: str): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __eq__(self, obj: URL) -> bool: ...
    def __add__(self, obj: URL) -> ParseResult: ...
    def __contains__(self, obj: URL) -> bool: ...
    def __hash__(self) -> int: ...
    def __len__(self) -> int: ...

    @property
    def is_path(self) -> bool: ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def has_fragment(self) -> bool: ...
    @property
    def is_file(self) -> bool: ...
    @property
    def as_path(self) -> pathlib.Path: ...
    @property
    def get_extension(self) -> Union[str, None]: ...
    @property
    def url_stem(self) -> str: ...
    @classmethod
    def create(cls, url) -> URL: ...

    def is_same_domain(self, url: Union[str, URL]) -> bool: ...
    def get_status(self) -> Tuple[bool, int]: ...
    def compare(self, url_to_compare: Union[URL, str]) -> bool: ...
    def capture(self, regex) -> Union[re.Match, bool]: ...
    def test_path(self, regex) -> bool: ...
    def decompose_path(self, exclude: List = ...) -> List: ...
    def paginate(self, regex_path: str = ..., param: str = ...) -> str: ...


class TestUrl:
    def __init__(self, current_url: str, url_to_test: str) -> None: ...
    def __repr__(self) -> str: ...
    def __bool__(self) -> bool: ...


class URLPassesTest:
    name = name
    paths = set(paths)
    failed_paths = []
    ignore_files = ignore_files

    def __init__(
        self,
        name: str,
        *,
        paths: List = ...,
        ignore_files: List = ...
    ): ...

    def __call__(self, url: str) -> bool: ...
    @lru_cache(maxsize=10)
    def default_ignored_files(self) -> list: ...


class UrlPassesRegexTest:
    name: str = ...
    regex: re.Pattern = ...

    def __init__(self, name: str, *, regex: str = ...) -> str: ...
    def __call__(self, url: str) -> bool: ...
