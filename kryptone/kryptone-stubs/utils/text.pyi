import re
from functools import cached_property
from typing import Any, Generator, Literal, Union

PRICE: re.Pattern = ...

PRICE_EURO: re.Pattern = ...


def parse_price(text) -> Union[str, float]: ...


def clean_text(text: str, encoding: str = Literal['utf-8']) -> str: ...


class Text:
    raw_text: str = ...
    tokens: list = ...
    punctation: bool = ...
    accents: bool = ...
    encoding: str = Literal['utf-8']

    def __init__(
        self,
        text: str,
        punctation: bool = ...,
        accents: bool = ...
    ) -> None: ...

    def __str__(self) -> str: ...
    def __add__(self, obj) -> str: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Generator: ...
    @cached_property
    def tokens(self) -> list: ...


def remove_punctuation(
    text: str,
    keep: list[str] = ...,
    email_exception: bool = ...
) -> str: ...


def remove_accents(text: str) -> str: ...


def clean_dictionnary(
    item: dict[str, Any],
    accents: bool = ...,
    punctation: bool = ...
) -> dict: ...


def normalize_spaces(text_or_tokens: Union[str, list]) -> str: ...


def slugify(text: str) -> str: ...


class LogStyle():
    CHECK_MARK: str
    CROSS_MARK: str
    EXCLAMATION_MARK: str
    PLUS: str

    foreground_color_code: int = Literal[38]
    background_color_code: int = Literal[48]
    background: bool = ...
    text: str = ...

    def __init__(self, text: str, background: bool = ...) -> None: ...

    def get_text(self, red: int, green: int, blue: int) -> str: ...

    def red_text(self) -> str: ...
    def yellow_text(self) -> str: ...
    def green_text(self) -> str: ...
    def gray_text(self) -> str: ...
    def blue_text(self) -> str: ...


def color_text(color: str, text: str, background: bool = ...) -> str: ...
