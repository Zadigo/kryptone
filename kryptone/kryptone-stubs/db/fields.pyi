from typing import (Any, Callable, Literal,
                    Tuple, Union)

from kryptone.db.tables import Table

class Field:
    python_type: str = ...
    base_validators: list = ...
    name: str = ...
    null: bool = ...
    primary_key: bool = ...
    default: Any = ...
    unique: bool = ...
    table: Table = ...
    base_field_parameters: list[Union[Literal['text'],
                                      Literal['integer'], Literal['blob']], Literal['not null']] = ...

    def __init__(
        self,
        name: str,
        *,
        null: bool = ...,
        primary_key: bool = ...,
        default: Any = ...,
        unique: bool = ...,
        validators: list[Callable[[str], None]] = ...
    ) -> None: ...

    def __repr__(self) -> str: ...

    def __hash__(self) -> int: ...
    def __eq__(self, value: str) -> bool: ...
    # @property
    # def field_type(self) -> Union[str]: ...

    @classmethod
    def create(
        cls,
        name: str,
        params: list[str],
        verbose_name: str = ...
    ) -> Field: ...

    def to_python(self, data: Any) -> Any: ...
    def to_database(self, data: Any) -> str: ...
    def field_parameters(self) -> list[str]: ...
    def prepare(self, table: Table) -> None: ...
    def deconstruct(self) -> Tuple[str, None, list[str]]: ...


class CharField(Field):
    ...


class IntegerField(Field):
    ...


class JSONField(Field):
    ...


class BooleanField(Field):
    truth_types: list[str] = ...
    false_types: list[str] = ...
