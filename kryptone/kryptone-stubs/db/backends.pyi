import sqlite3
from sqlite3 import Row
from typing import (Any, List, Tuple)

class SQL:
    ALTER_TABLE = 'alter table {table} add column {params}'
    CREATE_TABLE = 'create table if not exists {table} ({fields})'
    DROP_TABLE = 'drop table if exists {table}'
    DELETE = 'delete from {table}'
    INSERT = 'insert into {table} ({fields}) values({values})'
    SELECT = 'select {fields} from {table}'
    UPDATE = 'update {table} set {params}'

    AND = 'and {rhv}'
    OR = 'or {rhv}'

    EQUALITY = '{field}={value}'
    LIKE = '{field} like {conditions}'
    BETWEEN = 'between {lhv} and {rhv}'
    IN = '{field} in ({values})'
    NOT_LIKE = '{field} not like {wildcard}'
    WHERE_CLAUSE = 'where {params}'
    WHERE_NOT = 'where not ({params})'

    WILDCARD_MULTIPLE = '%'
    WILDCARD_SINGLE = '_'

    ASCENDING = '{field} asc'
    DESCENDNIG = '{field} desc'

    ORDER_BY = 'order by {conditions}'

    @staticmethod
    def quote_value(value: Any) -> str: ...
    @staticmethod
    def comma_join(values: List[str]) -> str: ...

    @staticmethod
    def simple_join(
        values: List[str],
        space_characters: bool = ...
    ) -> str: ...

    @staticmethod
    def finalize_sql(sql: str) -> str: ...
    @staticmethod
    def de_sqlize_statement(sql: str) -> str: ...

    def quote_startswith(self, value: str) -> str: ...
    def quote_endswith(self, value: str) -> str: ...
    def quote_like(self, value: str) -> str: ...

    def dict_to_sql(
        self,
        data: dict[str, int, float],
        quote_values: bool = ...
    ) -> Tuple[list[str], list[str]]: ...

    def build_script(self, *sqls) -> str: ...
    def decompose_filters(self, **kwargs) -> List[Tuple[str]]: ...
    def build_filters(self, items: List[Tuple[str]]) -> List[str]: ...
    def build_annotation(self, **conditions) -> List[str]: ...


class SQLiteBackend(SQL):
    database: str = ...
    connection: sqlite3.Connection = ...

    def list_table_columns_sql(self, table) -> list[BaseRow]: ...
    def create_table_fields(self, table, columns_to_create) -> list: ...
    def list_tables_sql(self) -> list[BaseRow]: ...


class BaseRow(Row):
    backend_class: SQLiteBackend = ...

    def __repr__(self) -> str: ...
    def __contains__(self, value: str) -> bool: ...
    def __eq__(self, value: str) -> bool: ...
    @property
    def initialize_backend(self) -> SQLiteBackend: ...
    # def delete() -> None: ...
